/*
Parameters will be of the form { Name: 'secretName', Value: 'secretValue', ... }[]
*/
/* Amplify Params - DO NOT EDIT
	ENV
	REGION
	STORAGE_S3012D5CA4_BUCKETNAME
	GOOGLE_SHEET_ID
	GOOGLE_SERVICE_ACCOUNT_EMAIL
Amplify Params - DO NOT EDIT */

const aws = require("aws-sdk");
const { GoogleSpreadsheet } = require("google-spreadsheet");

exports.handler = async (event) => {
  // TODO implement
  // Initialize the sheet - doc ID is the long id in the sheets URL
  const { Parameters } = await new aws.SSM()
    .getParameters({
      Names: ["GOOGLE_PRIVATE_KEY"].map(
        (secretName) => process.env[secretName]
      ),
      WithDecryption: true,
    })
    .promise();

  const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID);

  const GOOGLE_PRIVATE_KEY = Parameters[0].Value.replace(/\\n/g, "\n");

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  await doc.useServiceAccountAuth({
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
    private_key: GOOGLE_PRIVATE_KEY,
  });

  await doc.loadInfo(); // loads document properties and worksheets

  const sheet = await doc.sheetsByIndex[0];

  const rawData = await sheet.getRows();
  const header = sheet.headerValues;

  const data = rawData.map((row) =>
    header.reduce(
      (acc, currentVal) => ({ ...acc, [currentVal]: row[currentVal] }),
      {}
    )
  );

  const s3 = new aws.S3();

  await s3.putObject({
    Bucket: process.env.STORAGE_S3012D5CA4_BUCKETNAME,
    Key: "public/salarydata.json",
    ContentType: "application/json",
    Body: JSON.stringify(data),
  }).promise();
  

  const response = {
    statusCode: 200,
    //  Uncomment below to enable CORS requests
    headers: {
      "Access-Control-Allow-Origin": "*",
      "Access-Control-Allow-Headers": "*",
    },
    body: "Success",
  };
  return response;
};
